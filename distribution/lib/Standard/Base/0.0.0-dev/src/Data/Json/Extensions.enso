import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Decimal.Decimal
import project.Data.Dictionary.Dictionary
import project.Data.Json.JS_Object
import project.Data.Json.Json
import project.Data.Locale.Locale
import project.Data.Numbers.Float
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Numeric.Math_Context.Math_Context
import project.Data.Text.Text
import project.Data.Text.Text_Sub_Range.Text_Sub_Range
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Deprecated.Deprecated
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Meta
import project.Nothing.Nothing
import project.Warning.Warning
from project.Data.Boolean import Boolean, False, True
from project.Data.Range.Extensions import all
from project.Data.Text.Extensions import all

## GROUP Conversions
   ICON convert
   Converts the given value to a JSON serialized value.
Any.to_json : Text
Any.to_json self = Json.stringify self

## PRIVATE
   Converts the given value to a JSON serialized value.
Error.to_json : Text
Error.to_json self = self.to_js_object.to_text

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Text.to_js_object : JS_Object | Text
Text.to_js_object self =
    case self of
        Text -> JS_Object.from_pairs [["type", "Text"]]
        _ -> self

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Number.to_js_object : JS_Object | Number
Number.to_js_object self = case self of
    Number -> JS_Object.from_pairs [["type", "Number"]]
    Integer -> JS_Object.from_pairs [["type", "Integer"]]
    Float -> JS_Object.from_pairs [["type", "Float"]]
    _ : Integer ->
        ## JS Safe Integer range -(2^53 - 1) to (2^53 - 1)
        js_max_integer = 9007199254740991
        if self >= -js_max_integer && self < js_max_integer then self else
            JS_Object.from_pairs [["type", "Integer"], ["value", self.to_text]]
    _ -> self

## PRIVATE
   Converts a JS_Object to an Integer.
Integer.from (that:JS_Object) =
    case that.get "type" == "Integer" && ["value"].all that.contains_key of
        True -> Integer.parse (that.at "value")
        False -> Error.throw (Illegal_Argument.Error "Invalid JS_Object for Integer.")

## PRIVATE
   Converts the given value to a JSON serializable object.
Decimal.to_js_object : JS_Object
Decimal.to_js_object self =
    JS_Object.from_pairs [["type", "Decimal"], ["value", self.to_text], ["scale", self.scale], ["precision", self.precision]]

## PRIVATE
   Converts a JS_Object to a Decimal.
Decimal.from (that:JS_Object) =
    case that.get "type" == "Decimal" && ["value", "scale", "precision"].all that.contains_key of
        True ->
            math_context = Math_Context.new (that.at "precision")
            raw_value = Decimal.from_string (that.at "value") math_context
            raw_value.with_scale (that.at "scale")
        False -> Error.throw (Illegal_Argument.Error "Invalid JS_Object for Decimal.")

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Boolean.to_js_object : JS_Object | Boolean
Boolean.to_js_object self = case self of
    Boolean -> JS_Object.from_pairs [["type", "Boolean"]]
    _ -> self

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Nothing.to_js_object : Nothing
Nothing.to_js_object self = self

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JS_Object.
Array.to_js_object : Vector
Array.to_js_object self =
    stripped = Warning.clear self
    proxy = Array_Proxy.new stripped.length i-> stripped.at i .to_js_object
    Vector.from_polyglot_array proxy

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JS_Object.
Vector.to_js_object : Vector
Vector.to_js_object self =
    stripped = Warning.clear self
    proxy = Array_Proxy.new stripped.length i-> stripped.at i . to_js_object
    Vector.from_polyglot_array proxy

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JS_Object.
Any.to_js_object : JS_Object
Any.to_js_object self =
    m = Meta.meta self
    case m of
        _ : Meta.Atom ->
            type_pair = ["type", Meta.type_of self . to_text]
            cons = m.constructor
            java_cons = cons.value ...
            if java_cons == self then JS_Object.from_pairs [type_pair] else
                fs = m.fields
                field_names = cons.fields

                pairs = Vector.build initial_capacity=field_names.length+2 builder->
                    builder.append type_pair
                    builder.append ["constructor", cons.name]
                    0.up_to field_names.length . map i-> builder.append [field_names.at i, fs.at i . to_js_object]
                JS_Object.from_pairs pairs
        _ : Meta.Constructor ->
            type_name = Meta.get_qualified_type_name self . split '.' . at -2
            JS_Object.from_pairs [["type", type_name], ["constructor", m.name]]
        _ -> Error.throw ("Cannot convert " + self.to_text + " to JSON")

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JS_Object.
Error.to_js_object : JS_Object
Error.to_js_object self =
    caught = self.catch
    error_type = ["type", "Error"]
    error_content = ["content", caught]
    error_message = ["message", caught.to_display_text]
    JS_Object.from_pairs [error_type, error_content, error_message]

## PRIVATE
   Converts the given value to a JSON serializable object.
   Custom serialization for Locale, serializes the language, country and variant.
Locale.to_js_object : JS_Object
Locale.to_js_object self =
    pairs = Vector.build initial_capacity=5 b->
        b.append ["type", "Locale"]
        b.append ["constructor", "new"]
        b.append ["language", self.language]
        b.append ["country", self.country]
        b.append ["variant", self.variant]
    JS_Object.from_pairs pairs

## PRIVATE
   Converts the given value to a JSON serializable object.
   For Map, this is serialized as a Vector of Key-Value pairs.

   Enso Maps support arbitrary types as map keys, so we cannot serialize them into JS Objects because there only strings are accepted as keys.
Dictionary.to_js_object : JS_Object
Dictionary.to_js_object self =
    as_vector = self.to_vector
    as_vector.map p-> [p.first.to_js_object, p.second.to_js_object]

## PRIVATE
   ICON convert
   Extension for Text to allow use.
   Deprecated: The `parse_json` method uses a faster implementation now by default
Text.parse_fast_json : Nothing | Boolean | Number | Text | Vector | JS_Object
Text.parse_fast_json self =
    warning = Deprecated.Warning "Standard.Base.Data.Text.Text" "parse_fast_json" "Deprecated: The `parse_json` method uses a faster implementation now by default"
    Warning.attach warning self.parse_json
