import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.No_Such_Key.No_Such_Key
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

## A key-value store. It is possible to use any type as keys and values and mix
   them in one Dictionary. Keys are checked for equality based on their hash
   code and `==` operator, which is both an internal part of Enso. Enso is
   capable of computing a hash code, and checking for equality any objects that
   can appear in Enso - primitives, Atoms, values coming from different
   languages, etc.

   For keys that are not reflexive, like `Number.nan`,
   [Same Value equality specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality)
   is used. This means that both `Number.nan` and types with comparators that
   violate reflexivity (e.g. their `compare` method always returns `Nothing`)
   can be used as keys in the Dictionary.

   A single key-value pair is called an *entry*.

   It is possible to pass a Dictionary created in Enso to foreign functions,
   where it will be treated as appropriate map structures - in Python that is a
   dictionary, and in JavaScript, it is a `Map`. And likewise, it is possible
   to pass a foreign map into Enso, where it will be treated as a Dictionary.
@Builtin_Type
type Dictionary key value
    ## PRIVATE
       ADVANCED
       Returns an empty dictionary.
    empty : Dictionary
    empty = @Builtin_Method "Dictionary.empty"

    ## PRIVATE
       ADVANCED
       Returns a single-element dictionary with the given key and value.
       A Call to `Dictionary.singleton key value` is the same as a call to
       `Dictionary.empty.insert key value`.

       Arguments:
       - key: The key to to use for `value` in the dictionary.
       - value: The value to store under 'key' in the dictionary.

       > Example
         Create a single element dictionary storing the key "my_key" and the
         value 2.

             example_singleton = Dictionary.singleton "my_key" 2
    singleton : Any -> Any -> Dictionary
    singleton key value = Dictionary.empty.insert key value

    ## ALIAS dictionary, lookup table
       GROUP Constants
       ICON convert
       Builds a dictionary from two Vectors. The first vector contains the keys,
       and the second vector contains the values. The two vectors must be of the
       same length.

       Arguments:
       - keys: A vector of keys.
       - values: A vector of values.
       - error_on_duplicates: A flag which specifies if duplicate keys on the
         input vector should result in an error. By default, set to `True`,
         meaning that if two entries in the vector share the same key, an
         `Illegal_Argument` error is raised. If set to `False`, the last entry
         with a given key will be kept.
    from_keys_and_values : Vector Any -> Vector Any -> Boolean -> Dictionary ! Illegal_Argument
    from_keys_and_values keys:Vector values:Vector error_on_duplicates:Boolean=True =
        if keys.length != values.length then Error.throw (Illegal_Argument.Error "`Dictionary.from_keys_and_values` encountered two vectors of different lengths.") else
            keys.fold_with_index Dictionary.empty current-> idx-> key->
                if error_on_duplicates.not || (current.contains_key key . not) then current.insert key (values.at idx) else
                    Error.throw (Illegal_Argument.Error "`Dictionary.from_keys_and_values` encountered duplicate key: "+key.to_display_text)

    ## ALIAS dictionary, lookup table
       GROUP Constants
       ICON convert
       Builds a dictionary from a vector of key-value pairs, with each key-value
       pair represented as a 2 element vector.

       Arguments:
       - vec: A vector of key-value pairs (2 element vectors).
       - error_on_duplicates: A flag which specifies if duplicate keys on the
         input vector should result in an error. By default, set to `True`,
         meaning that if two entries in the vector share the same key, an
         `Illegal_Argument` error is raised. If set to `False`, the last entry
         with a given key will be kept.

       > Example
         Building a dictionary containing two key-value pairs.

             example_from_vector = Dictionary.from_vector [["A", 1], ["B", 2]]
    from_vector : Vector Any -> Boolean -> Dictionary ! Illegal_Argument
    from_vector vec error_on_duplicates=True =
        vec.fold Dictionary.empty m-> el-> if el.length != 2 then Error.throw (Illegal_Argument.Error "`Dictionary.from_vector` encountered an invalid value. Each value in the vector has to be a key-value pair - it must have exactly 2 elements.") else
            key = el.at 0
            value = el.at 1
            if error_on_duplicates.not || (m.contains_key key . not) then m.insert key value else
                Error.throw (Illegal_Argument.Error "`Dictionary.from_vector` encountered duplicate key: "+key.to_display_text)

    ## GROUP Logical
       ICON metadata
       Returns True if the Dictionary is empty, i.e. does not have any entries.
    is_empty : Boolean
    is_empty self = self.size == 0

    ## GROUP Logical
       ICON metadata
       Returns True if the Dictionary is not empty, i.e. has at least one entry.
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## GROUP Metadata
       ICON metadata
       Returns the number of entries in this dictionary.
    size : Integer
    size self = @Builtin_Method "Dictionary.size"

    ## GROUP Metadata
       ICON metadata
       Returns the number of entries in this dictionary.
    length : Integer
    length self = self.size

    ## GROUP Calculations
       ICON row_add
       Inserts a key-value mapping into this dictionary, overriding any existing
       instance of `key` with the new `value`.

       Note that since the return type is also a `Dictionary`, multiple `insert`
       calls can be chained, e.g., `dictionary.insert "A" 1 . insert "B" 2`.

       Due to the limitation of the current implementation, inserts with a
       key that is already contained in the dictionary, or insert on a
       dictionary instance that is re-used in other computations, have a linear
       time complexity. For all the other cases, the time complexity of this
       method is constant.

       Arguments:
       - key: The key to insert the value for.
       - value: The value to associate with the `key`.

       > Example
         Insert the value "seven" into the dictionary for the key 7.

             import Standard.Examples

             example_insert = Examples.dictionary.insert 7 "seven"
    insert : Any -> Any -> Dictionary
    insert self key value = @Builtin_Method "Dictionary.insert"

    ## GROUP Selections
       ICON table_clean
       Removes an entry specified by the given key from this dictionary, and
       returns a new dictionary without this entry. Throw `No_Such_Key.Error` if
       `key` is not present.

       Arguments:
       - key: The key to look up in the dictionary.

       > Example
         Remove key "A" from a dictionary

             import Standard.Examples

             Examples.dictionary.remove "A"
    remove : Any -> Dictionary ! No_Such_Key
    remove self key =
        Panic.catch Any (self.remove_builtin key) _->
            Error.throw (No_Such_Key.Error self key)

    ## GROUP Selections
       ICON parse3
       Gets the value associated with `key` in this dictionary, or throws a
       `No_Such_Key.Error` if `key` is not present.

       This method has a constant time complexity.

       Arguments:
       - key: The key to look up in the dictionary.

       > Example
         Looks up the value for the key "A" in a dictionary.

             import Standard.Examples

             example_at = Examples.dictionary.at "A"
    at : Any -> Any ! No_Such_Key
    at self key = self.get key (Error.throw (No_Such_Key.Error self key))

    ## ICON parse3
       Gets the value associated with `key` in this dictionary, or returns
       `if_missing` if it isn't present.

       This method has a constant time complexity.

       Arguments:
       - key: The key to look up in the dictionary.
       - if_missing: The value to use if the key isn't present.

       > Example
         Get the value for the key 2 in a dictionary or instead return "zero" if it
         isn't present.

             import Standard.Examples

             example_get = Examples.dictionary.get 2 "zero"
    get : Any -> Any -> Any
    get self key ~if_missing=Nothing = self.get_builtin key if_missing

    ## GROUP Logical
       ICON preparation
       Returns True iff the Dictionary contains the given `key`.
    contains_key : Any -> Boolean
    contains_key self key = @Builtin_Method "Dictionary.contains_key"

    ## GROUP Selections
       ICON select_column
       Returns an unsorted vector of all the keys in this Dictionary.
    keys : Vector Any
    keys self = self.to_vector.map pair-> pair.at 0

    ## GROUP Selections
       ICON select_column
       Returns an unsorted vector of all the values in this Dictionary.
    values : Vector Any
    values self = self.to_vector.map pair-> pair.at 1

    ## ICON column_add
       Maps a function over each value in this dictionary.

       Arguments:
       - function: The function to apply to each value in the dictionary, taking
         a value and returning a value.

       > Example
         Append "_word" to all values in the dictionary.

             import Standard.Examples

             example_map = Examples.dictionary.map (+ "_word")
    map : (Any -> Any) -> Dictionary
    map self function =
        kv_func = _ -> function
        self.map_with_key kv_func

    ## ICON column_add
       Maps a function over each key-value pair in the dictionary, transforming
       the value.

       Arguments:
       - function: Function to apply to each key and value in the dictionary,
         taking a key and a value and returning a value.

       > Example
         Prepend the keys to the values in the dictionary.

             import Standard.Examples

             example_map_with_key =
                Examples.dictionary.map_with_key (k -> v -> k.to_text + "-" + v)
    map_with_key : (Any -> Any -> Any) -> Dictionary
    map_with_key self function =
        Dictionary.from_vector <| self.to_vector.map pair->
            key = pair.first
            value = pair.last
            [key, (function key value)]

    ## ICON column_add
       Maps a function over each key in this dictionary.

       Arguments:
       - function: The function to apply to each key in the dictionary, taking a
         key and returning a new key.

       > Example
         Doubling all keys in the dictionary.

             import Standard.Examples

             example_map_keys = Examples.dictionary.map_keys *2
    map_keys : (Any -> Any) -> Dictionary
    map_keys self function =
        trans_function = k -> v -> [function k, v]
        self.transform trans_function

    ## ICON column_add
       Transforms the map's keys and values to create a new dictionary.

       Arguments:
       - function: The function used to transform the dictionary, taking a key
         and a value and returning a pair of `[key, value]`.

       ! Error Conditions
         - If multiple dictionary entries end up with duplicate keys after the
           transformation, an `Illegal_Argument.Error` is thrown.

       > Example
         Turn all keys into `Text` and append "_word" to the values in the
         dictionary.

             import Standard.Examples

             example_transform =
                Examples.dictionary.transform (k -> v -> [k.to_text, v + "_word"])
    transform : (Any -> Any -> [Any, Any]) -> Dictionary
    transform self function =
        func_pairs = p -> function (p.at 0) (p.at 1)
        vec_transformed = self.to_vector.map func_pairs
        new_dictionary = Dictionary.from_vector vec_transformed error_on_duplicates=True
        new_dictionary.catch Illegal_Argument error->
            case error.message.starts_with "`Dictionary.from_vector` encountered duplicate key" of
                True ->
                    new_message = error.message.replace "from_vector" "transform"
                    Error.throw (Illegal_Argument.Error new_message error.cause)
                False -> new_dictionary

    ## ICON transform4
       Combines the values in the dictionary.

       Arguments:
       - init: The initial value for the fold.
       - function: A binary function to apply to pairs of values.

       > Example
         Find the length of the longest word in the dictionary.

             import Standard.Examples

             example_fold = Examples.dictionary.fold 0 (l -> r -> l.max r.length)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init function = self.values.fold init function

    ## ICON transform4
       Combines the key-value pairs in the dictionary.

       Arguments:
       - init: The initial value for the fold.
       - function: A function taking the left value, the current key, and the
         current value, and combining them to yield a single value.

       > Example
         Glue the values in the dictionary together with the keys.

             import Standard.Examples

             example_fold_with_key =
                Examples.dictionary.fold_with_key "" (l -> k -> v -> l + k.to_text + v)
    fold_with_key : Any -> (Any -> Any -> Any -> Any) -> Any
    fold_with_key self init function =
        self.to_vector.fold init acc-> pair->
            function acc pair.first pair.last

    ## PRIVATE
       ADVANCED
       Applies a function to each value in the dictionary.

       Arguments:
       - function: The function to apply to each value in the dictionary, taking
         a value and returning anything.

       This method does not return the results, so it is only useful for performing
       computations with side-effects.

       If the function returns a dataflow error, the error is converted to a
       panic and thrown immediately stopping further processing.

       > Example
         Printing each value in the dictionary.

             import Standard.Examples

             example_each = Examples.dictionary.each IO.println
    each : (Any -> Any) -> Nothing
    each self function =
        kv_func = _ -> function
        self.each_with_key kv_func

    ## PRIVATE
       ADVANCED
       Applies a function to each key-value pair in the dictionary.

       Arguments:
       - function: The function to apply to each key-value pair in the
         dictionary, taking a key and a value and returning anything.

       This method does not return the results, so it is only useful for performing
       computations with side-effects.

       > Example
         Printing each key and value in the dictionary.

             import Standard.Examples

             example_each_with_key = Examples.dictionary.each_with_key k->v->
                IO.println k
                IO.println v
    each_with_key : (Any -> Any -> Any) -> Nothing
    each_with_key self function =
        self.to_vector.each pair->
            function pair.first pair.last

    ## GROUP Conversions
       ICON convert
       Returns an unsorted vector of key-value pairs (nested 2 element vectors).
       `Dictionary.from_vector` method is an inverse method, so the following
       expression is true for all dictionaries:
       `Dictionary.from_vector dictionary.to_vector == dictionary`.
    to_vector : Vector Any
    to_vector self = @Builtin_Method "Dictionary.to_vector"

    ## PRIVATE
       Returns a text representation of this Dictionary.
    to_text : Text
    to_text self = @Builtin_Method "Dictionary.to_text"

    ## PRIVATE
    get_builtin : Any -> Any -> Any
    get_builtin self key ~if_missing = @Builtin_Method "Dictionary.get_builtin"
