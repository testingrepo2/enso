import project.Any.Any
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Dictionary.Dictionary
import project.Data.Numbers.Integer
import project.Data.Ordering.Comparable
import project.Data.Ordering.Ordering
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

## An unordered collection of unique values.
type Set
    ## PRIVATE
    Value (underling_dictionary : Dictionary Any Nothing)

    ## PRIVATE
       ADVANCED
       Constructs a new set from a vector.

       Arguments:
       - vector: the vector of elements to add to the set.
       - error_on_duplicates: specifies if duplicate elements in the input
         should result in an error. Defaults to `False`, meaning that the last
         occurrence of each duplicated element is retained in the set. If set to
         `True` it will raise an `Illegal_Argument` if duplicate elements are
         encountered.
    from_vector : Vector Any -> Boolean -> Set ! Illegal_Argument
    from_vector (vector : Vector) (error_on_duplicates : Boolean = False) =
        pairs_array = Array_Proxy.new vector.length (i-> [vector.at i, Nothing])
        pairs = Vector.from_polyglot_array pairs_array
        dictionary = Dictionary.from_vector pairs error_on_duplicates=error_on_duplicates
        Set.Value dictionary

    ## PRIVATE
       ADVANCED
       Constructs an empty set.
    empty : Set
    empty = Set.Value Dictionary.empty

    ## GROUP Conversions
       ICON convert
       Returns a vector containing all elements of this set.
    to_vector : Vector
    to_vector self = self.underling_dictionary.keys

    ## GROUP Metadata
       ICON metadata
       Returns the number of elements in this set.
    size : Integer
    size self = self.underling_dictionary.size

    ## GROUP Metadata
       ICON metadata
       Returns the number of elements in this set.
    length : Integer
    length self = self.size

    ## GROUP Logical
       ICON metadata
       Checks if the set is empty.
    is_empty : Boolean
    is_empty self = self.underling_dictionary.is_empty

    ## GROUP Logical
       ICON metadata
       Checks if the set is not empty.
    not_empty : Boolean
    not_empty self = self.underling_dictionary.not_empty

    ## GROUP Logical
       ICON preparation
       Checks if this set contains a given value.
    contains : Any -> Boolean
    contains self value = self.underling_dictionary.contains_key value

    ## GROUP Logical
       ICON preparation
       Checks if this set contains a given value, treating Nothing as a
       relational NULL.

       If the argument is non-Nothing and exists in `value`, return true.

       If the argument is non-Nothing and does not exist in `value`, return
       false if `value` does not contain a Nothing, or Nothing if `value` does
       contain a Nothing.

       If the argument is Nothing, return Nothing if `value` is non-empty, or
       false if `value` is empty.
    contains_relational : Any -> Boolean | Nothing
    contains_relational self value =
        case value of
            _ : Nothing -> if self.is_empty then False else Nothing
            _ ->
                if self.contains value then True else
                    has_nulls = self.contains Nothing
                    if has_nulls then Nothing else False

    ## ALIAS add
       GROUP Calculations
       ICON row_add
       Adds a value to this set.
    insert : Any -> Set
    insert self value =
        dictionary = self.underling_dictionary.insert value Nothing
        Set.Value dictionary

    ## GROUP Calculations
       ICON union
       Creates a union of the two sets.
    union : Set -> Set
    union self (other : Set) =
        start_dictionary = self.underling_dictionary
        dictionary = other.to_vector.fold start_dictionary m-> el-> m.insert el Nothing
        Set.Value dictionary

    ## GROUP Calculations
       ICON join
       Creates an intersection of the two sets.
    intersection : Set -> Set
    intersection self (other : Set) =
        other_dictionary = other.underling_dictionary
        dictionary = self.underling_dictionary.keys.fold Dictionary.empty m-> el->
            if other_dictionary.contains_key el then m.insert el Nothing else m
        Set.Value dictionary

    ## ICON join
       Computes a set difference.

       Returns the set that contains all elements of this set that are not in
       the other set.
    difference : Set -> Set
    difference self (other : Set) =
        other_dictionary = other.underling_dictionary
        dictionary = self.underling_dictionary.keys.fold Dictionary.empty m-> el->
            if other_dictionary.contains_key el then m else m.insert el Nothing
        Set.Value dictionary

    ## PRIVATE
    to_text : Text
    to_text self = self.to_vector.map .pretty . join ", " "Set{" "}"

## PRIVATE
type Set_Comparator
    ## PRIVATE
    compare x y =
        if x.size != y.size then Nothing else
            if (x.difference y).is_empty then Ordering.Equal else Nothing

    ## PRIVATE
    hash x =
        vec = x.to_vector.sort . remove_warnings
        Comparable.from vec . hash vec
