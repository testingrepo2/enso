import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Decimal.Decimal
import project.Data.Dictionary.Dictionary
import project.Data.Numbers.Float
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Time.Date.Date
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Time_Of_Day.Time_Of_Day
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.No_Such_Conversion
import project.Errors.Common.Type_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.No_Such_Key.No_Such_Key
import project.Meta
import project.Metadata.Display
import project.Metadata.Widget
import project.Nothing.Nothing
import project.Panic.Panic
import project.Warning.Warning
from project.Data.Boolean import Boolean, False, True
from project.Data.Json.Extensions import all
from project.Data.Ordering import all
from project.Data.Range.Extensions import all
from project.Data.Text.Extensions import all
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice

polyglot java import com.fasterxml.jackson.core.JsonLocation
polyglot java import com.fasterxml.jackson.core.JsonProcessingException
polyglot java import com.fasterxml.jackson.databind.JsonNode
polyglot java import com.fasterxml.jackson.databind.node.ArrayNode
polyglot java import com.fasterxml.jackson.databind.node.BooleanNode
polyglot java import com.fasterxml.jackson.databind.node.DoubleNode
polyglot java import com.fasterxml.jackson.databind.node.JsonNodeFactory
polyglot java import com.fasterxml.jackson.databind.node.JsonNodeType
polyglot java import com.fasterxml.jackson.databind.node.LongNode
polyglot java import com.fasterxml.jackson.databind.node.NullNode
polyglot java import com.fasterxml.jackson.databind.node.ObjectNode
polyglot java import com.fasterxml.jackson.databind.node.TextNode
polyglot java import com.fasterxml.jackson.databind.ObjectMapper
polyglot java import java.util.Iterator

## Methods for serializing from and to JSON.
type Json
    ## ALIAS from text
       GROUP Conversions
       ICON convert

       Parse a Text value into a `JS_Object` or an Enso primitive value (like
       `Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values.

       > Example
        Parse the text "[null, null, true, false]".

            Json.parse "[null, null, true, false]"
    parse : Text -> Nothing | Boolean | Number | Text | Vector | Date | Date_Time | Time_Of_Day | JS_Object ! Invalid_JSON
    parse (json : Text) =
        error_handler js_exception =
            line = js_exception.payload.getLocation.getLineNr.to_text
            col = js_exception.payload.getLocation.getColumnNr.to_text
            pos = '[line: '+line+', column: '+col+']'
            Error.throw (Invalid_JSON.Error js_exception.payload.getOriginalMessage+' at position '+pos)

        if json.is_empty then Error.throw (Invalid_JSON.Error "Empty string is not valid JSON.") else
            Panic.catch JsonProcessingException handler=error_handler <|
                node = ObjectMapper.new.readTree json
                make_enso (read_json_node node)

    ## PRIVATE
       ADVANCED
       Serialize an Object to JSON.
    stringify : Any -> Text
    stringify object =
        to_json_node object . toString

    ## PRIVATE
       Convert a Vector of Keys and Values to JSON.
       Keys must be `Text` values.
    from_pairs : Vector -> Text
    from_pairs pairs =
        JS_Object.from_pairs pairs . to_text

## A failure indicating malformed text input into the JSON parser.

   Check the `message` field for detailed information on the specific failure.
type Invalid_JSON
    ## PRIVATE
    Error message

    ## PRIVATE
       Converts the error to a display representation.
    to_display_text : Text
    to_display_text self =
        "Parse error in parsing JSON: " + self.message.to_text + "."

## PRIVATE
   Read a JsonNode to an Enso type
read_json_node : JsonNode -> Nothing | Boolean | Number | Text | Vector | JS_Object
read_json_node node = case node.getNodeType of
    JsonNodeType.NULL -> Nothing
    JsonNodeType.BOOLEAN -> node.asBoolean
    JsonNodeType.STRING -> node.asText
    JsonNodeType.NUMBER ->
        if node.isFloatingPointNumber then node.asDouble else node.asLong
    JsonNodeType.ARRAY -> read_json_array node
    JsonNodeType.OBJECT -> JS_Object.new node

## PRIVATE
    Read a JsonNode to a Vector
read_json_array : ArrayNode -> Vector
read_json_array node =
    proxy = Array_Proxy.new node.size i->  (read_json_node (node.get i))
    Vector.from_polyglot_array proxy


## PRIVATE
    Convert a value to a JsonNode
to_json_node : Any -> Any
to_json_node value =
    case value of
        Nothing -> NullNode.getInstance
        b : Boolean -> BooleanNode.valueOf b
        n : Integer ->
            js_obj = n.to_js_object
            if js_obj.is_a JS_Object then to_json_node js_obj else LongNode.valueOf n
        f : Float   ->
            if f.is_nan || f.is_infinite then NullNode.getInstance else DoubleNode.valueOf f
        t : Text    ->
            TextNode.valueOf t
        v : Vector  ->
            n = ArrayNode.new JsonNodeFactory.instance
            v.each e-> n.add (to_json_node e)
            n
        a : Array  ->
            n = ArrayNode.new JsonNodeFactory.instance
            a.each e-> n.add (to_json_node e)
            n
        j : JS_Object -> j.object_node
        other ->
            to_json_node other.to_js_object

## PRIVATE
type JS_Object
    ## PRIVATE
       Creates a new `JS_Object` from an `ObjectNode`.
    new : ObjectNode -> JS_Object
    new object_node =
        make_field_names object =
            name_iterator = object.fieldNames
            Vector.build initial_capacity=object.size builder->
                loop iterator builder =
                    if iterator.hasNext then
                        builder.append (iterator:Iterator).next
                        @Tail_Call loop iterator builder
                loop name_iterator builder
        JS_Object.Value object_node (make_field_names object_node)

    ## PRIVATE
       Creates a Jackon_Object from a list of key-value pairs.
       Keys must be `Text` values.
       Values will be recursively converted to JSON serializable as needed.
    from_pairs : Vector -> JS_Object
    from_pairs pairs =
        mapper = ObjectMapper.new
        new_object = mapper.createObjectNode
        keys = Vector.build builder->
            pairs.map pair->
                case pair.first of
                    text : Text ->
                        ## Ensure that any dataflow errors that could be stored in `pair.second` are propagated.
                           Potential errors in `pair.first` are propagated thanks to the case-of above.
                        pair.second.if_not_error <|
                            jackson_value_node = to_json_node pair.second.to_js_object
                            new_object.set text jackson_value_node
                            builder.append text
                    _ -> Error.throw (Illegal_Argument.Error "JS_Object.from_pairs: key must be a Text value")
        JS_Object.Value new_object keys

    ## PRIVATE
    Value object_node ~field_array

    ## GROUP Logical
       ICON preparation
       Returns True iff the objects contains the given `key`.
    contains_key : Text -> Boolean
    contains_key self key:Text = self.object_node.has key

    ## ICON parse3
       Get a value for a key of the object, or a default value if that key is not present.

       Arguments:
       - key: The key to get.
       - if_missing: The value to return if the key is not found.
    @key make_field_name_selector
    get : Text -> Any -> Nothing | Boolean | Number | Text | Vector | JS_Object
    get self key:Text ~if_missing=Nothing =
        if self.contains_key key . not then if_missing else
            child = self.object_node.get key
            make_enso (read_json_node child)

    ## GROUP Selections
       ICON parse3
       Get a value for a key of the object.
       If the key is not found, throws a `No_Such_Key` error.

       Arguments:
       - key: The key to get.
    @key make_field_name_selector
    at : Text -> JS_Object | Boolean | Number | Nothing | Text | Vector ! No_Such_Key
    at self key:Text = self.get key (Error.throw (No_Such_Key.Error self key))

    ## GROUP Metadata
       ICON metadata
       Get the keys of the object.
    field_names : Vector
    field_names self = self.field_array

    ## ICON column_add
       Maps a function over each value in this object

       Arguments:
       - function: The function to apply to each value in the map, taking a
         value and returning a value.
    map : (Any->Any) -> Vector
    map self function =
        kv_func = _ -> function
        self.map_with_key kv_func

    ## ICON column_add
       Maps a function over each field-value pair in the object.

       Arguments:
       - function: The function to apply to each key and value in the map,
         taking a key and a value and returning a value.
    map_with_key : (Any -> Any -> Any) -> Vector
    map_with_key self function =
        self.field_names.map key->
            value = self.get key
            function key value

    ## GROUP Metadata
       ICON metadata
       Gets the number of keys in the object.
    length : Number
    length self = self.object_node.size

    ## GROUP Logical
       ICON metadata
       Returns True if the JS_Object is empty, i.e., does not have any entries.
    is_empty : Boolean
    is_empty self = self.length == 0

    ## GROUP Logical
       ICON metadata
       Returns True if the JS_Object is not empty, i.e., has at least one entry.
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## GROUP Conversions
       ICON convert
       Convert the object to a Vector of Pairs.
    to_vector : Vector
    to_vector self =
        keys = self.field_array
        proxy = Array_Proxy.new keys.length (i-> [(keys.at i), (self.get (keys.at i))])
        Vector.from_polyglot_array proxy

    ## PRIVATE
       Convert the object to a JS_Object.
    to_js_object : JS_Object
    to_js_object self = self

    ## PRIVATE
       Convert to a Text.
    to_text : Text
    to_text self = self.to_json

    ## PRIVATE
       Convert JS_Object to a friendly string.
    to_display_text : Text
    to_display_text self =
        self.to_text.to_display_text

    ## PRIVATE
       Convert to a JSON representation.
    to_json : Text
    to_json self = self.object_node.toString

    ## PRIVATE
       Transform the vector into text for displaying as part of its default
       visualization.
    to_default_visualization_data : Text
    to_default_visualization_data self =
        render self

    ## GROUP Conversions
       ICON convert
       Creates an Enso object from the JS_Object.
    into : Any -> Any
    into self target_type = case target_type of
        JS_Object  -> self
        Vector     -> self.to_vector
        Dictionary -> Dictionary.from_vector self.to_vector
        _          ->
            ## First try a conversion
            Panic.catch No_Such_Conversion (self.to target_type) _->
                ## If that fails, try to construct the type
                meta = Meta.meta target_type
                meta_type = if meta.is_a Meta.Type then meta else Meta.meta (Meta.type_of target_type)
                constructors = meta_type.constructors
                filtered = if self.contains_key "constructor" then constructors.filter c-> c.name == self.get "constructor" else constructors
                case filtered.length of
                    0 -> Error.throw (Illegal_Argument.Error "Unable to build a "+target_type.to_text+" - cannot find the constructor.")
                    1 ->
                        constructor = filtered.at 0
                        field_names = constructor.fields
                        if field_names.all self.contains_key then constructor.new (field_names.map self.at) else
                            missing_fields = field_names.filter (f-> self.contains_key f . not)
                            Error.throw (Illegal_Argument.Error "Unable to build a "+target_type.to_text+" - the constructor "+constructor.name+"'s fields "+missing_fields.to_display_text+" not found in the source object.")
                    _ -> Error.throw (Illegal_Argument.Error "Unable to build a "+target_type.to_text+" cannot find unique constructor.")

    ## ICON edit
       Modify a field of a JSON object, returning a new updated object.

       Arguments:
       - key: the name of the field to modify.
       - value: the new value for the field.

       > Example
         Change the value for 'foo' to 'asdf'.

             obj = JS_Object.from_pairs [["foo", "bar"], ["baz", "quux"]]
             obj.set_value "foo" "asdf"
             # => {"foo":"asdf","baz":"quux"}
    set_value : Text -> Any -> JS_Object
    set_value self key:Text value =
        copied_object_node = self.object_node.deepCopy
        jackson_value_node = to_json_node value.to_js_object
        copied_object_node.set key jackson_value_node
        JS_Object.Value copied_object_node self.field_array

## PRIVATE
   Make a field name selector
make_field_name_selector : JS_Object -> Display -> Widget
make_field_name_selector js_object display=Display.Always =
    Single_Choice display=display values=(js_object.field_names.map n->(Option n n.pretty))

## PRIVATE
type JS_Object_Comparator
    ## PRIVATE
    compare : JS_Object -> JS_Object -> (Ordering|Nothing)
    compare obj1 obj2 =
        obj1_keys = obj1.field_names
        obj2_keys = obj2.field_names
        same_values = obj1_keys.length == obj2_keys.length && obj1_keys.all key->
            (obj1.get key == obj2.at key).catch No_Such_Key _->False
        if same_values then Ordering.Equal else Nothing

    ## PRIVATE
    hash : JS_Object -> Integer
    hash obj =
        values_hashes = obj.field_names.map field_name->
            val = obj.get field_name
            Comparable.from val . hash val
        # Return sum, as we don't care about ordering of field names
        values_hashes.fold 0 (+)

## PRIVATE
Comparable.from (_:JS_Object) = JS_Object_Comparator

## PRIVATE
   Render the JS_Object to Text with truncated depth.
render object depth=0 max_depth=5 max_length=100 = case object of
    _ : JS_Object ->
        if depth == max_depth then '"{...}"' else
            len = object.length
            keys = object.field_names.take max_length
            children = keys.map key-> key.to_json + ': ' + (render (object.get key) (depth+1) max_depth max_length)
            '{' + (children.join ", ") + (if len > max_length then ', "...": "Another ' + (len - max_length).to_text + ' items truncated."' else "") + '}'
    _ : Vector ->
        len = object.length
        if len == 0 then '[]' else if depth == max_depth then '"[...]"' else
            children = 0.up_to (max_length.min len) . map i-> render (object.at i) (depth+1) max_depth max_length
            "[" + (children.join ", ") + (if len > max_length then ', "... another ' + (len - max_length).to_text + ' items truncated."' else "") + "]"
    _ : Array ->
        proxy = Array_Proxy.new object.length (i-> make_enso (object.at i))
        @Tail_Call render (Vector.from_polyglot_array proxy) depth max_depth max_length
    Nothing -> object.to_json
    _ : Text -> object.to_json
    _ : Boolean -> object.to_json
    _ : Number -> object.to_json
    _ -> @Tail_Call render (JS_Object.new object) depth max_depth max_length

## PRIVATE
   Internal function ensuring that a Jackson object is presented appropriately to Enso.
make_enso object =
    case object of
        Nothing     -> Nothing
        _ : Text    -> object
        _ : Boolean -> object
        _ : Number  -> object
        v : Vector  ->
            proxy = Array_Proxy.new v.length (i-> make_enso (v.at i))
            Vector.from_polyglot_array proxy
        a : Array   ->
            proxy = Array_Proxy.new a.length (i-> make_enso (a.at i))
            Vector.from_polyglot_array proxy
        js_object : JS_Object ->
            ## Handle deserializing date and time types.
            type_name = js_object.get "type"
            parsed = case type_name of
                "Date" -> Date.from js_object
                "Date_Time" -> Date_Time.from js_object
                "Time_Of_Day" -> Time_Of_Day.from js_object
                "Decimal" -> Decimal.from js_object
                "Integer" -> Integer.from js_object
                _ -> js_object

            if parsed.is_error then js_object else parsed
