import project.Any.Any
import project.Data.Boolean.Boolean
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Text.Text_Sub_Range.Text_Sub_Range
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.File_Error.File_Error
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code
import project.Network.HTTP.Response_Body.Response_Body
import project.Network.URI.URI
import project.Nothing.Nothing
import project.System.File.Existing_File_Behavior.Existing_File_Behavior
import project.System.File.File
import project.System.File.Generic.Writable_File.Writable_File
import project.System.File_Format.Auto_Detect
import project.System.File_Format.File_Format
import project.System.File_Format.Infer
import project.System.File_Format_Metadata.File_Format_Metadata
from project.Data.Text.Extensions import all
from project.Metadata import Display, Widget
from project.Network.HTTP.Response_Body import decode_format_selector

polyglot java import java.net.http.HttpHeaders
polyglot java import java.util.Optional
polyglot java import org.enso.base.enso_cloud.EnsoHttpResponse

type Response
    ## PRIVATE

       A type representing an HTTP response.

       Arguments:
       - internal_http_response: The internal representation of the HTTP
         response.
       - body_object: The body of the response. If nothing will be read from the
         internal_http_response. Allows for materialization.
    Value internal_http_response body_object=Nothing

    ## PRIVATE
       Creates a new Response with the body materialized.
    with_materialized_body : Response
    with_materialized_body self =
        Response.Value self.internal_http_response self.body.materialize

    ## GROUP Metadata
       ICON metadata
       Get the uri for the response.
    uri : URI
    uri self =
        uri_string = self.internal_http_response.uri.toString
        URI.parse uri_string

    ## GROUP Metadata
       ICON metadata
       Get the response headers.

       It returns a vector of Header objects and not a mapping, because the
       response may contain multiple headers with the same name.

       > Example
         Getting the headers from a response.
         Note: This example will make a network request.

             import Standard.Examples

             example_headers = Examples.get_response.headers

       > Example
         Creating a mapping from the headers, throwing an error if there are duplicates.
         Note: This example will make a network request.

             import Standard.Examples

             example_headers = Dictionary.from_vector error_on_duplicates=True (Examples.get_response.headers.map h-> [h.name, h.value])
    headers : Vector Header
    headers self =
        # This is a mapping that maps a header name to a list of values (since headers may be duplicated).
        multi_map = self.internal_http_response.headers.map
        multi_map.to_vector.flat_map p->
            key = p.first
            values = p.second
            values.map v-> Header.new key v

    ## ICON metadata
       Get the response content type.
    content_type : Text | Nothing
    content_type self = self.get_header "Content-Type"

    ## GROUP Metadata
       ICON metadata
       Get the response content length in bytes.
       This method uses the `Content-Length` header, and does not read the body.
       If the header is not present will return Nothing.
    content_length : Integer | Nothing
    content_length self =
        length_text = self.get_header "Content-Length"
        length_text.if_not_nothing <| Integer.parse length_text

    ## ICON data_input
       Get the response body.

       > Example
         Getting the body from a response.
         Note: This example will make a network request.

             import Standard.Examples

             example_body = Examples.get_response.body
    body : Response_Body
    body self = self.body_object.if_nothing <|
        metadata = resolve_file_metadata_for_response self
        Response_Body.new self.internal_http_response.body metadata self.uri

    ## ICON metadata
       Get the response status code.

       > Example
         Getting the code from a response.
         Note: This example will make a network request.

             import Standard.Examples

             example_code = Examples.get_response.code
    code : HTTP_Status_Code
    code self = HTTP_Status_Code.Value self.internal_http_response.statusCode

    ## ALIAS parse
       GROUP Conversions
       ICON data_input
       Uses the format to decode the body.
       If using `Auto_Detect`, the content-type will be used to determine the
       format. If the format cannot be detected automatically, `if_unsupported`
       is returned.
    @format decode_format_selector
    decode : File_Format -> Any -> Any
    decode self format=Auto_Detect ~if_unsupported=(Error.throw (File_Error.Unsupported_Type (resolve_file_metadata_for_response self))) =
        self.body.decode format if_unsupported

    ## ALIAS parse as text
       GROUP Conversions
       ICON data_input
       Decodes the body to a Text value.

       Arguments:
       - encoding: The encoding to use. If not specified, the encoding is
         inferred from response headers. If that fails, UTF-8 is used as the
         fallback.
    @encoding Encoding.default_widget
    decode_as_text : Encoding | Infer -> Text
    decode_as_text self (encoding : Encoding | Infer = Infer) =
        self.body.decode_as_text encoding

    ## ALIAS parse as json, parse json
       GROUP Conversions
       ICON data_input
       Decodes the body as JSON.

       Arguments:
       - encoding: The encoding to use. If not specified, the encoding is
         inferred from response headers. If that fails, UTF-8 is used as the
         fallback.

       > Example
         Convert a response from JSON.

             import Standard.Examples

             example_to_text = Data.fetch Examples.geo_data_url . decode_as_json
    @encoding Encoding.default_widget
    decode_as_json : Encoding | Infer -> JS_Object | Boolean | Number | Nothing | Text | Vector
    decode_as_json self (encoding : Encoding | Infer = Infer) =
        self.body.decode_as_json encoding

    ## ALIAS to_file
       GROUP Output
       ICON data_download
       Write response body to a File.

       Arguments:
       - file: The file to write the body to.
       - on_existing_file: Specifies how to proceed if the file already exists.

       > Example
         Write the contents of the request body to a scratch file on disk. The
         file will be created if it does not exist, and will be overwritten if
         it does.

             import Standard.Examples

             example_write =
                Data.fetch Examples.geo_data_url . write Examples.scratch_file
    @path (Widget.Text_Input display=Display.Always)
    write : Writable_File -> Existing_File_Behavior -> File
    write self file:Writable_File on_existing_file=Existing_File_Behavior.Backup =
        self.body.write file on_existing_file

    ## PRIVATE
       Convert to a JavaScript Object representing this Response.

       > Example
         Convert a response to JS_Object.
         Note: This example will make a network request.

             import Standard.Examples

             example_to_json = Examples.get_response.to_js_object
    to_js_object : JS_Object
    to_js_object self =
        type_pair = ["type", "Response"]
        cons_pair = ["constructor", "Value"]
        JS_Object.from_pairs [type_pair, cons_pair, ["headers", self.headers], ["body", self.body], ["code", self.code]]

    ## PRIVATE
    get_header : Text -> Any -> Text | Any
    get_header self name:Text ~if_missing=Nothing =
        java_optional = self.internal_http_response.headers.firstValue name
        if java_optional.isPresent then java_optional.get else if_missing

## PRIVATE
resolve_file_metadata_for_response : Response -> File_Format_Metadata
resolve_file_metadata_for_response response =
    uri_as_text = response.uri.to_text
    guessed_filename = filename_from_content_disposition (response.get_header "Content-Disposition") . if_nothing <|
        last_path_segment = uri_as_text.take (Text_Sub_Range.After_Last "/")
        ## Heuristic: If the last path segment contains a dot, it is likely a filename,
           otherwise it is too unlikely + lack of extension will not help our guessing anyway,
           so we can discard it.
        if last_path_segment.contains "." then last_path_segment else Nothing
    File_Format_Metadata.Value path=uri_as_text name=guessed_filename content_type=response.content_type

## PRIVATE
filename_from_content_disposition : Text | Nothing -> Text | Nothing
filename_from_content_disposition content_disposition =
    content_disposition.if_not_nothing <|
        match = 'filename="(.*)"'.to_regex.match content_disposition
        match.if_not_nothing <| match.get 1
