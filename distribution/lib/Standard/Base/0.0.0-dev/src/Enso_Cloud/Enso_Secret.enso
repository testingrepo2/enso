import project.Data.Base_64.Base_64
import project.Data.Dictionary.Dictionary
import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Enso_Cloud.Enso_File.Enso_Asset_Type
import project.Enso_Cloud.Enso_File.Enso_File
import project.Enso_Cloud.Internal.Enso_Path.Enso_Path
import project.Enso_Cloud.Internal.Existing_Enso_Asset.Existing_Enso_Asset
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Runtime.Context
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Enso_File import list_assets
from project.Metadata import make_single_choice

polyglot java import org.enso.base.enso_cloud.EnsoSecretHelper
polyglot java import org.enso.base.enso_cloud.HideableValue
polyglot java import org.enso.base.enso_cloud.HideableValue.Base64EncodeValue
polyglot java import org.enso.base.enso_cloud.HideableValue.ConcatValues
polyglot java import org.enso.base.enso_cloud.HideableValue.PlainValue
polyglot java import org.enso.base.enso_cloud.HideableValue.SecretValue

## A reference to a secret stored in the Enso Cloud.
type Enso_Secret
    ## PRIVATE
    Value name:Text id:Text path:Enso_Path

    ## GROUP Output
       ICON edit
       Create a new secret.

       Arguments:
       - name: The name of the secret
       - value: The value of the secret
       - parent: The parent folder for the secret. If `Nothing` then it will be
         created in the current working directory.
    create : Text -> Text -> Enso_File | Nothing -> Enso_Secret
    create name:Text value:Text parent:(Enso_File | Nothing)=Nothing = if name == "" then Error.throw (Illegal_Argument.Error "Secret name cannot be empty") else
        Context.Output.if_enabled disabled_message="Creating a secret is forbidden as the Output context is disabled." panic=False <|
            if name.starts_with "connection-" then Error.throw (Illegal_Argument.Error "Secret name cannot start with 'connection-'") else
                parent_dir = parent.if_nothing Enso_File.current_working_directory
                path = if name.contains "/" then Error.throw (Illegal_Argument.Error "Secret name cannot contain `/`.") else parent_dir.enso_path.resolve name
                path.if_not_error <|
                    parent_dir_asset = Existing_Enso_Asset.get_asset_reference_for parent_dir
                    body = JS_Object.from_pairs <|
                        [["name", name], ["value", value], ["parentDirectoryId", parent_dir_asset.id]]
                    handle_already_exists _ =
                        message = "A secret with the name " + name.pretty + " already exists inside of directory " + parent_dir.name + "."
                        Error.throw (Illegal_Argument.Error message)
                    error_handlers = Dictionary.from_vector [["resource_already_exists", handle_already_exists]]
                    id = Utils.http_request_as_json HTTP_Method.Post Utils.secrets_api body error_handlers=error_handlers
                    Enso_Secret.Value name id path

    ## GROUP Output
       ICON trash
       Deletes a secret.
    delete : Enso_Secret
    delete self =
        Context.Output.if_enabled disabled_message="Deleting a secret is forbidden as the Output context is disabled." panic=False <|
            uri = URI.from (secret_asset_uri self) . add_query_argument "force" "true"
            response = Utils.http_request HTTP_Method.Delete uri
            response.if_not_error self

    ## GROUP Input
       ICON key
       Gets a list of all the secrets in the folder.

       Arguments:
       - folder: The folder to get the secrets from. If `Nothing` then will get
         the secrets from the current working directory.
    list : Enso_File | Nothing -> Vector Enso_Secret
    list parent:(Enso_File | Nothing)=Nothing =
        effective_parent = parent.if_nothing Enso_File.current_working_directory
        secrets_as_assets = list_assets effective_parent . filter f-> f.asset_type == Enso_Asset_Type.Secret
        secrets_as_assets.map asset->
            Enso_Secret.Value asset.title asset.id (effective_parent.enso_path.resolve asset.title)

    ## GROUP Input
       ICON key
       Get a Secret if it exists.

       Arguments:
       - name: The name of the secret, or an `enso://` path.
       - parent: The parent folder for the secret, if resolving by name.
         If `Nothing` then will search in the current working directory.
         If an `enso://` path is provided, the parent argument is not considered
         and must be `Nothing`.
    @name (make_single_choice (Enso_Secret.list.map .name))
    get : Text -> Enso_File | Nothing -> Enso_Secret ! Not_Found
    get name:Text parent:(Enso_File | Nothing)=Nothing =
        is_path = name.starts_with Enso_Path.protocol_prefix
        case is_path of
            True ->
                if parent != Nothing then Error.throw (Illegal_Argument.Error "Parent argument must be Nothing when resolving by `enso://` path.") else
                    Enso_Secret.resolve_path name
            False ->
                effective_parent = parent.if_nothing Enso_File.current_working_directory
                secret_path = effective_parent.enso_path.resolve name . to_text
                Enso_Secret.resolve_path secret_path


    ## PRIVATE
    resolve_path (path:Text) -> Enso_Secret ! Not_Found =
        asset = Existing_Enso_Asset.resolve_path path if_not_found=(Error.throw Not_Found)
        parsed_path = Enso_Path.parse path
        parsed_path.if_not_error <| if asset.asset_type != Enso_Asset_Type.Secret then Error.throw (Illegal_Argument.Error "The provided path points to "+asset.asset_type.to_text+", not a Secret.") else
            Enso_Secret.Value asset.title asset.id parsed_path

    ## GROUP Metadata
       ICON metadata
       Checks if a Secret exists.

       Arguments:
       - name: The name of the secret
       - parent: The parent folder for the secret. If `Nothing` then will check
         in the current working directory.
    exists : Text -> Enso_File | Nothing -> Boolean
    exists name:Text parent:(Enso_File | Nothing)=Nothing =
        Enso_Secret.list parent . any s-> s.name == name

    ## GROUP Output
       ICON edit
       Updates the value of a secret.

       ! Secret Caching
         Note that secret values are cached, so the update may not be visible in
         other workflows unless they are restarted. You can also use the
         `Enso_User.flush_caches` function to flush the caches.

       Arguments:
       - new_value: The new value of the secret
    update_value : Text -> Enso_Secret
    update_value self (new_value : Text) =
        Context.Output.if_enabled disabled_message="Updating a secret is forbidden as the Output context is disabled." panic=False <|
            body = JS_Object.from_pairs [["value", new_value]]
            response = Utils.http_request HTTP_Method.Put (secret_resource_uri self) body
            response.if_not_error <|
                EnsoSecretHelper.deleteSecretFromCache self.id
                self

## PRIVATE
type Enso_Secret_Error
    ## PRIVATE
    Access_Denied

    ## PRIVATE
    to_display_text : Text
    to_display_text self = "Cannot read secret value into Enso."

## A derived value that may be derived from secrets.
type Derived_Secret_Value
    ## PRIVATE
    Plain_Text (text : Text)

    ## PRIVATE
    Secret_Value (secret : Enso_Secret)

    ## PRIVATE
    Concat (left : Derived_Secret_Value) (right : Derived_Secret_Value)

    ## PRIVATE
    Base_64_Encode (value : Derived_Secret_Value)

    ## PRIVATE
    + self (other : Derived_Secret_Value) = Derived_Secret_Value.Concat self other

    ## PRIVATE
       Converts to a plain text value, if the value contains no secrets.
       If the value contains secrets, it raises an error.
    to_plain_text : Text ! Enso_Secret_Error
    to_plain_text self =
        java_repr = as_hideable_value self
        if java_repr.containsSecrets then Error.throw Enso_Secret_Error.Access_Denied else
            java_repr.safeResolve

    ## PRIVATE
    to_text : Text
    to_text self = as_hideable_value self . render

    ## PRIVATE
       If this value does not contains any secrets, it will be simplified to a
       plain Text value, otherwise it will be returned as is.
    simplify : Derived_Secret_Value | Text
    simplify self = self.to_plain_text.catch Enso_Secret_Error _->self

## PRIVATE
Derived_Secret_Value.from (that : Text) = Derived_Secret_Value.Plain_Text that

## PRIVATE
Derived_Secret_Value.from (that : Enso_Secret) = Derived_Secret_Value.Secret_Value that

## PRIVATE
as_hideable_value : Text | Enso_Secret | Derived_Secret_Value -> HideableValue
as_hideable_value (value : Text | Enso_Secret | Derived_Secret_Value) = case value of
    text : Text -> HideableValue.PlainValue.new text
    secret : Enso_Secret -> HideableValue.SecretValue.new secret.id
    Derived_Secret_Value.Plain_Text text -> as_hideable_value text
    Derived_Secret_Value.Secret_Value secret -> as_hideable_value secret
    Derived_Secret_Value.Concat left right -> HideableValue.ConcatValues.new (as_hideable_value left) (as_hideable_value right)
    Derived_Secret_Value.Base_64_Encode inner -> HideableValue.Base64EncodeValue.new (as_hideable_value inner)

## PRIVATE
secret_resource_uri secret =
    Utils.secrets_api + "/" + secret.id

## PRIVATE
secret_asset_uri secret =
    Utils.assets_api + "/" + secret.id
